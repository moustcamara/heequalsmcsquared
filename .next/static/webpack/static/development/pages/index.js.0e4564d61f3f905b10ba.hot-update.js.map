{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.0e4564d61f3f905b10ba.hot-update.js","sources":["webpack:///./pages/index.js"],"sourcesContent":["import Link from 'next/link';\r\nimport { getHomePageAPI, getBlogPostsAPI } from '../api';\r\n// We create this in just a tick\r\nimport { linkResolver } from '../helpers';\r\n\r\nimport { RichText } from 'prismic-reactjs';\r\n\r\n\r\nimport React, { Component } from 'react'\r\n\r\nimport ProfileCard from '../components/ProfileCard.js';\r\nimport TracksCard from '../components/TracksCard.js';\r\n\r\n/**\r\n* As you can see we are importing our layout here,\r\n* and below we wrap all of the page in it.\r\n*/\r\nimport DefaultLayout from '../layouts';\r\n\r\n\r\n\r\nfunction getTime(time) {\r\n  if (!isNaN(time)) {\r\n    return (\r\n      Math.floor(time / 60) + \":\" + (\"0\" + Math.floor(time % 60)).slice(-2)\r\n    );\r\n  }\r\n}\r\n\r\n\r\nclass Index extends React.Component {\r\n     constructor(props) {\r\n        super(props)\r\n\r\n\r\n\r\n        this.setTrack = this.setTrack.bind(this);\r\n\r\n        this.state = {\r\n          value: null,\r\n          selectedTrack: null,\r\n          selectedTrackName:'default',\r\n          selectedTrackNumber: null,\r\n          selectedTrackFile: null,\r\n          player: \"stopped\",\r\n          currentTime: null,\r\n          duration: null\r\n        };\r\n\r\n      }\r\n\r\n      setTrack(trackName, trackFile, trackNumber) {\r\n\r\n           this.setState({\r\n                selectedTrack: null,\r\n                selectedTrackName: trackName,\r\n                selectedTrackFile: trackFile, //trackFile\r\n                selectedTrackNumber: trackNumber,\r\n                player: \"playing\", \r\n                duration: this.player.duration\r\n           }, function () {\r\n                console.log(this.state.selectedTrackNumber);\r\n           });\r\n\r\n            this.player.play();\r\n\r\n      }\r\n  \r\n\r\n\r\n    componentDidMount() {\r\n      this.player.addEventListener(\"timeupdate\", e => {\r\n        this.setState({\r\n          currentTime: e.target.currentTime,\r\n          duration: e.target.duration\r\n        });\r\n      });\r\n    }\r\n\r\n    componentWillUnmount() {\r\n      this.player.removeEventListener(\"timeupdate\", () => {});\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n      if (this.state.selectedTrackFile !== prevState.selectedTrackFile) {\r\n        let track = this.state.selectedTrackFile;\r\n\r\n       // if (track) {\r\n          this.player.src = track;\r\n          this.player.play();\r\n          this.setState({ player: \"playing\", duration: this.player.duration,  selectedTrackNumber: 'track-1'});\r\n      //  }\r\n      }\r\n      if (this.state.player !== prevState.player) {\r\n        if (this.state.player === \"paused\") {\r\n          this.player.pause();\r\n        } else if (this.state.player === \"stopped\") {\r\n          this.player.pause();\r\n          this.player.currentTime = 0;\r\n          this.setState({ selectedTrackFile: null });\r\n        } else if (\r\n          this.state.player === \"playing\" &&\r\n          prevState.player === \"paused\"\r\n        ) {\r\n          this.player.play();\r\n        }\r\n      }\r\n    }\r\n\r\n\r\n  static async getInitialProps() {\r\n    const response = await getHomePageAPI({ pageSize: 1 });\r\n     return {\r\n      home: response.results\r\n    };\r\n  }\r\n\r\n  render() {\r\n\r\n\r\n    function handleChange(newValue) {\r\n      setValue(newValue);\r\n    }\r\n\r\n\r\n    const currentTime = getTime(this.state.currentTime);\r\n    const duration = getTime(this.state.duration);\r\n\r\n    let tracklistData = this.props.home[0].data.body.find(slice => slice.slice_type == \"tracklist\").items;\r\n\r\n\r\n    return (\r\n        <DefaultLayout>\r\n            {this.props.home.map(homepage => (\r\n              <div>\r\n              \r\n                 <div className=\"row\">\r\n                    {homepage.data.body.map(slice => slice.slice_type == \"profile_card\" && <ProfileCard profile={slice.primary} />)}              \r\n                    {homepage.data.body.map(slice => slice.slice_type == \"tracklist\" && <TracksCard setTrack={this.setTrack} state={this} trackSource={slice.items} />)}  \r\n                 </div>\r\n\r\n\r\n\r\n                    <audio ref={ref => (this.player = ref)} />\r\n                </div>\r\n              ))}\r\n        </DefaultLayout>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default Index;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AAGA;AAEA;AACA;AAEA;;;;;AAIA;AACA;AAGA;AACA;AACA;AAGA;AACA;AACA;AAEA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAPA;AAkBA;AACA;;;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AANA;AAQA;AACA;AAEA;AAEA;;;AAIA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AACA;;;AAUA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AAGA;AAEA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAVA;AAeA;;;;;;;;;;AArCA;AAAA;AAAA;AACA;;AADA;AACA;AACA;AADA;AACA;;;;;;;;;;;AAnFA;AACA;AAyHA;;;;A","sourceRoot":""}