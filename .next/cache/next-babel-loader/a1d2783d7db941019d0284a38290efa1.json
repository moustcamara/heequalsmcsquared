{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react'; // RichText is give to us\n\nimport { RichText } from 'prismic-reactjs'; // A new API request that will create in just a tick\n\nimport { getBlogPostAPI } from '../api';\nimport linkResolver from '../helpers'; // Here we are reusing our layout again\n\nimport DefaultLayout from '../layouts';\n\nvar BlogPost = /*#__PURE__*/function (_Component) {\n  _inherits(BlogPost, _Component);\n\n  var _super = _createSuper(BlogPost);\n\n  function BlogPost() {\n    _classCallCheck(this, BlogPost);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(BlogPost, [{\n    key: \"render\",\n    value: function render() {\n      var post = this.props.post.data;\n      return __jsx(DefaultLayout, null, __jsx(\"article\", null, __jsx(\"h1\", null, post.title.length ? post.title[0].text : ''), RichText.render(post.body, linkResolver)));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function getInitialProps(context) {\n      var slug, response;\n      return _regeneratorRuntime.async(function getInitialProps$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              // we get the slug of the post so that we can\n              // query the API with it\n              slug = context.query.slug;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(getBlogPostAPI(slug));\n\n            case 3:\n              response = _context.sent;\n              return _context.abrupt(\"return\", {\n                post: response\n              });\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }]);\n\n  return BlogPost;\n}(Component);\n\nexport { BlogPost as default };","map":{"version":3,"sources":["C:/Users/Moustapha Camara/Dropbox/MOUST MUSIC/HeEqualsMCSquared Website/Development/heequalsmcsquared/pages/blogPost.js"],"names":["React","Component","RichText","getBlogPostAPI","linkResolver","DefaultLayout","BlogPost","post","props","data","title","length","text","render","body","context","slug","query","response"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CACA;;AACA,SAASC,QAAT,QAAyB,iBAAzB,C,CACA;;AACA,SAASC,cAAT,QAA+B,QAA/B;AACA,OAAOC,YAAP,MAAyB,YAAzB,C,CACA;;AACA,OAAOC,aAAP,MAA0B,YAA1B;;IAEqBC,Q;;;;;;;;;;;;;6BAWV;AACP,UAAMC,IAAI,GAAG,KAAKC,KAAL,CAAWD,IAAX,CAAgBE,IAA7B;AACA,aACE,MAAC,aAAD,QACE,uBACE,kBAAKF,IAAI,CAACG,KAAL,CAAWC,MAAX,GAAoBJ,IAAI,CAACG,KAAL,CAAW,CAAX,EAAcE,IAAlC,GAAyC,EAA9C,CADF,EAGGV,QAAQ,CAACW,MAAT,CAAgBN,IAAI,CAACO,IAArB,EAA2BV,YAA3B,CAHH,CADF,CADF;AASD;;;oCArB4BW,O;;;;;;AAC3B;AACA;AACQC,cAAAA,I,GAASD,OAAO,CAACE,K,CAAjBD,I;;+CACeb,cAAc,CAACa,IAAD,C;;;AAA/BE,cAAAA,Q;+CACC;AACLX,gBAAAA,IAAI,EAAEW;AADD,e;;;;;;;;;;;;EAN2BjB,S;;SAAjBK,Q","sourcesContent":["import React, { Component } from 'react';\r\n// RichText is give to us\r\nimport { RichText } from 'prismic-reactjs';\r\n// A new API request that will create in just a tick\r\nimport { getBlogPostAPI } from '../api';\r\nimport linkResolver from '../helpers';\r\n// Here we are reusing our layout again\r\nimport DefaultLayout from '../layouts';\r\n\r\nexport default class BlogPost extends Component {\r\n  static async getInitialProps(context) {\r\n    // we get the slug of the post so that we can\r\n    // query the API with it\r\n    const { slug } = context.query;\r\n    const response = await getBlogPostAPI(slug);\r\n    return {\r\n      post: response\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const post = this.props.post.data;\r\n    return (\r\n      <DefaultLayout>\r\n        <article>\r\n          <h1>{post.title.length ? post.title[0].text : ''}</h1>\r\n          {/* Here we pass our rich text field to Prismics RichText renderer, along with our linkResolver */}\r\n          {RichText.render(post.body, linkResolver)}\r\n        </article>\r\n      </DefaultLayout>\r\n    );\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}