{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport Prismic from 'prismic-javascript';\nimport { PRISMIC_API_URL } from '../config';\n\nvar getBlogPostsAPI = function getBlogPostsAPI(params) {\n  var API, response;\n  return _regeneratorRuntime.async(function getBlogPostsAPI$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(Prismic.api(PRISMIC_API_URL));\n\n        case 3:\n          API = _context.sent;\n          _context.next = 6;\n          return _regeneratorRuntime.awrap(API.query(Prismic.Predicates.at('document.type', 'blog_post'), _objectSpread({\n            orderings: '[my.blog_post.date desc]'\n          }, params)));\n\n        case 6:\n          response = _context.sent;\n          return _context.abrupt(\"return\", response);\n\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](0);\n          return _context.abrupt(\"return\", _context.t0);\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 10]], Promise);\n};\n\nvar getBlogPostAPI = function getBlogPostAPI(slug) {\n  var API, response;\n  return _regeneratorRuntime.async(function getBlogPostAPI$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(Prismic.api(PRISMIC_API_URL));\n\n        case 3:\n          API = _context2.sent;\n          _context2.next = 6;\n          return _regeneratorRuntime.awrap(API.query(Prismic.Predicates.at('my.blog_post.uid', slug)));\n\n        case 6:\n          response = _context2.sent;\n          return _context2.abrupt(\"return\", response.results[0]);\n\n        case 10:\n          _context2.prev = 10;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.error(_context2.t0);\n          return _context2.abrupt(\"return\", _context2.t0);\n\n        case 14:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[0, 10]], Promise);\n}; // Don't forget to export newly created function\n\n\nexport { getBlogPostsAPI, getBlogPostAPI };","map":{"version":3,"sources":["C:/Users/Moustapha Camara/Dropbox/MOUST MUSIC/HeEqualsMCSquared Website/Development/heequalsmcsquared/api/index.js"],"names":["Prismic","PRISMIC_API_URL","getBlogPostsAPI","params","api","API","query","Predicates","at","orderings","response","getBlogPostAPI","slug","results","console","error"],"mappings":";;;;;;;AAAA,OAAOA,OAAP,MAAoB,oBAApB;AACA,SAASC,eAAT,QAAgC,WAAhC;;AAEA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAMC,MAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAGFH,OAAO,CAACI,GAAR,CAAYH,eAAZ,CAHE;;AAAA;AAGdI,UAAAA,GAHc;AAAA;AAAA,2CAOGA,GAAG,CAACC,KAAJ,CACrBN,OAAO,CAACO,UAAR,CAAmBC,EAAnB,CAAsB,eAAtB,EAAuC,WAAvC,CADqB;AAGnBC,YAAAA,SAAS,EAAE;AAHQ,aAIhBN,MAJgB,EAPH;;AAAA;AAOdO,UAAAA,QAPc;AAAA,2CAgBbA,QAhBa;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAxB;;AAuBA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAAMC,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAEDZ,OAAO,CAACI,GAAR,CAAYH,eAAZ,CAFC;;AAAA;AAEbI,UAAAA,GAFa;AAAA;AAAA,2CAIIA,GAAG,CAACC,KAAJ,CACrBN,OAAO,CAACO,UAAR,CAAmBC,EAAnB,CAAsB,kBAAtB,EAA0CI,IAA1C,CADqB,CAJJ;;AAAA;AAIbF,UAAAA,QAJa;AAAA,4CAOZA,QAAQ,CAACG,OAAT,CAAiB,CAAjB,CAPY;;AAAA;AAAA;AAAA;AASnBC,UAAAA,OAAO,CAACC,KAAR;AATmB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAvB,C,CAcA;;;AACA,SAASb,eAAT,EAA0BS,cAA1B","sourcesContent":["import Prismic from 'prismic-javascript';\r\nimport { PRISMIC_API_URL } from '../config';\r\n\r\nconst getBlogPostsAPI = async params => {\r\n  try {\r\n    // We initialise the API with Prismic's kit\r\n    const API = await Prismic.api(PRISMIC_API_URL);\r\n    // Here we just query the documents with a filter of only returning\r\n    // the type of blog_post and order them. Full docs can be found here:\r\n    // https://github.com/prismicio/prismic-javascript#query-the-content\r\n    const response = await API.query(\r\n      Prismic.Predicates.at('document.type', 'blog_post'),\r\n      {\r\n        orderings: '[my.blog_post.date desc]',\r\n        ...params\r\n        // params will be extra parameters we can pass through with api calls\r\n        // such as how many documents to return\r\n      }\r\n    );\r\n    return response;\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n\r\n\r\nconst getBlogPostAPI = async slug => {\r\n  try {\r\n    const API = await Prismic.api(PRISMIC_API_URL);\r\n    // we pass up the slug to request the correct post\r\n    const response = await API.query(\r\n      Prismic.Predicates.at('my.blog_post.uid', slug)\r\n    );\r\n    return response.results[0];\r\n  } catch (error) {\r\n    console.error(error);\r\n    return error;\r\n  }\r\n};\r\n\r\n// Don't forget to export newly created function\r\nexport { getBlogPostsAPI, getBlogPostAPI };"]},"metadata":{},"sourceType":"module"}