{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Prismic from 'prismic-javascript';\nimport { PRISMIC_API_URL } from '../config';\n\nconst getBlogPostsAPI = async params => {\n  try {\n    // We initialise the API with Prismic's kit\n    const API = await Prismic.api(PRISMIC_API_URL); // Here we just query the documents with a filter of only returning\n    // the type of blog_post and order them. Full docs can be found here:\n    // https://github.com/prismicio/prismic-javascript#query-the-content\n\n    const response = await API.query(Prismic.Predicates.at('document.type', 'blog_post'), _objectSpread({}, params));\n    return response;\n  } catch (error) {\n    return error;\n  }\n};\n\nconst getBlogPostAPI = async slug => {\n  try {\n    const API = await Prismic.api(PRISMIC_API_URL); // we pass up the slug to request the correct post\n\n    const response = await API.query(Prismic.Predicates.at('my.blog_post.uid', slug));\n    return response.results[0];\n  } catch (error) {\n    console.error(error);\n    return error;\n  }\n}; // Don't forget to export newly created function\n\n\nexport { getBlogPostsAPI, getBlogPostAPI };","map":{"version":3,"sources":["C:/Users/Moustapha Camara/Dropbox/MOUST MUSIC/HeEqualsMCSquared Website/Development/heequalsmcsquared/api/index.js"],"names":["Prismic","PRISMIC_API_URL","getBlogPostsAPI","params","API","api","response","query","Predicates","at","error","getBlogPostAPI","slug","results","console"],"mappings":";;;;;;AAAA,OAAOA,OAAP,MAAoB,oBAApB;AACA,SAASC,eAAT,QAAgC,WAAhC;;AAEA,MAAMC,eAAe,GAAG,MAAMC,MAAN,IAAgB;AACtC,MAAI;AACF;AACA,UAAMC,GAAG,GAAG,MAAMJ,OAAO,CAACK,GAAR,CAAYJ,eAAZ,CAAlB,CAFE,CAGF;AACA;AACA;;AACA,UAAMK,QAAQ,GAAG,MAAMF,GAAG,CAACG,KAAJ,CACrBP,OAAO,CAACQ,UAAR,CAAmBC,EAAnB,CAAsB,eAAtB,EAAuC,WAAvC,CADqB,oBAIhBN,MAJgB,EAAvB;AASA,WAAOG,QAAP;AACD,GAhBD,CAgBE,OAAOI,KAAP,EAAc;AACd,WAAOA,KAAP;AACD;AACF,CApBD;;AAuBA,MAAMC,cAAc,GAAG,MAAMC,IAAN,IAAc;AACnC,MAAI;AACF,UAAMR,GAAG,GAAG,MAAMJ,OAAO,CAACK,GAAR,CAAYJ,eAAZ,CAAlB,CADE,CAEF;;AACA,UAAMK,QAAQ,GAAG,MAAMF,GAAG,CAACG,KAAJ,CACrBP,OAAO,CAACQ,UAAR,CAAmBC,EAAnB,CAAsB,kBAAtB,EAA0CG,IAA1C,CADqB,CAAvB;AAGA,WAAON,QAAQ,CAACO,OAAT,CAAiB,CAAjB,CAAP;AACD,GAPD,CAOE,OAAOH,KAAP,EAAc;AACdI,IAAAA,OAAO,CAACJ,KAAR,CAAcA,KAAd;AACA,WAAOA,KAAP;AACD;AACF,CAZD,C,CAcA;;;AACA,SAASR,eAAT,EAA0BS,cAA1B","sourcesContent":["import Prismic from 'prismic-javascript';\r\nimport { PRISMIC_API_URL } from '../config';\r\n\r\nconst getBlogPostsAPI = async params => {\r\n  try {\r\n    // We initialise the API with Prismic's kit\r\n    const API = await Prismic.api(PRISMIC_API_URL);\r\n    // Here we just query the documents with a filter of only returning\r\n    // the type of blog_post and order them. Full docs can be found here:\r\n    // https://github.com/prismicio/prismic-javascript#query-the-content\r\n    const response = await API.query(\r\n      Prismic.Predicates.at('document.type', 'blog_post'),\r\n      {\r\n        \r\n        ...params\r\n        // params will be extra parameters we can pass through with api calls\r\n        // such as how many documents to return\r\n      }\r\n    );\r\n    return response;\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n\r\n\r\nconst getBlogPostAPI = async slug => {\r\n  try {\r\n    const API = await Prismic.api(PRISMIC_API_URL);\r\n    // we pass up the slug to request the correct post\r\n    const response = await API.query(\r\n      Prismic.Predicates.at('my.blog_post.uid', slug)\r\n    );\r\n    return response.results[0];\r\n  } catch (error) {\r\n    console.error(error);\r\n    return error;\r\n  }\r\n};\r\n\r\n// Don't forget to export newly created function\r\nexport { getBlogPostsAPI, getBlogPostAPI };"]},"metadata":{},"sourceType":"module"}